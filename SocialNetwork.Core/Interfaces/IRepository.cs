namespace SocialNetwork.Data.Repositories;

/// <summary>
/// Определяет общий интерфейс репозитория для работы с объектами типа T, где T является классом.
/// </summary>
public interface IRepository<T> where T : class
{
    /// <summary>
    /// Получает все элементы коллекции как IQueryable.
    /// </summary>
    /// <returns>Возвращает IQueryable коллекцию элементов типа T.</returns>
    IQueryable<T> GetAll();

    /// <summary>
    /// Асинхронно получает объект типа T по указанному идентификатору id. Возвращает null, если объект не найден.
    /// </summary>
    /// <param name="id">Идентификатор объекта, который необходимо получить.</param>
    /// <returns>Задача, которая при успешном выполнении возвращает объект типа T или null, если объект не найден.</returns>
    Task<T?> GetAsync(int id);

    /// <summary>
    /// Асинхронно создает новый элемент в базе данных или другом хранилище данных.
    /// </summary>
    /// <param name="item">Элемент, который необходимо создать.</param>
    /// <returns>Возвращает идентификатор созданного элемента в виде целочисленного значения.</returns>
    Task<int> CreateAsync(T item);

    /// <summary>
    /// Асинхронно обновляет существующий элемент в базе данных.
    /// </summary>
    /// <param name="item">Элемент, который необходимо обновить.</param>
    /// <returns>Возвращает количество затронутых строк в базе данных.</returns>
    Task<int> UpdateAsync(T item);

    /// <summary>
    /// Асинхронно удаляет указанный элемент из хранилища данных.
    /// </summary>
    /// <param name="item">Элемент, который необходимо удалить.</param>
    /// <returns>Возвращает задачу, которая при успешном выполнении возвращает количество удаленных элементов (обычно 1, если удаление прошло успешно, иначе 0).</returns>
    Task<int> DeleteAsync(T item);
}